from bottle import route, run, template,request,response
import json
import requests
import naiveclassifier
import aiml_
import os
import os.path
import transferIntent
import transactionIntent
@route('/hello')
def index():
	print "hai"
	#return template('<b>Hello </b>!')
	return "moxtra demo"


def getSessionClassification(userid):
	print "get session"
	filename="sessions/"+userid+".tx"
	if os.path.isfile(filename):
		with open(filename) as f:
                	lines = f.readlines()
			for line in lines:
				userid_session=line.split(',')[0]
				if(userid==userid_session):
					return str(line.split(',')[1])
	else:
		return "nil"

def setSessionClassification(userid,classification):
	print "set session"
	filename="sessions/"+userid+".tx"
	lines=""
	if os.path.isfile(filename):
		with open(filename) as f:
                	lines = f.readlines()
			lines[0]=userid+","+classification+"\n"
		with open(filename,'w')as f:
			f.writelines(lines)	
	else:
		file = open(filename,'w')
		file.write(userid+","+classification+"\n")
		file.close()
def getIntentSteps(userid,classification):
	filename="sessions/"+userid+".tx"
        if os.path.isfile(filename):
                with open(filename) as f:
                        lines = f.readlines()
                        userid_session=lines[0].split(',')[0]
                        if(userid==userid_session):
                        	return str(lines[1].split(',')[1])
        else:
                return "nil"

def setIntentSteps(userid,step,classification):
        print "set session"
        filename="sessions/"+userid+".tx"
	lines=""
        if os.path.isfile(filename):
                with open(filename) as f:
                        lines = f.readlines()
                        lines[1]=userid+","+step+"\n"
		with open(filename,'w') as f:
			f.writelines(lines) 	
        else:
                file = open(filename,'w')
                file.write(userid+","+classification+"\n"+userid+",step1\n")
                file.close()

def initSession(userid,username):
	filename="sessions/"+userid+".tx"
        if not os.path.isfile(filename):
		file = open(filename,'w')
		if username.strip()=="":
			username="Annie"
                file.write(userid+",nil\n"+userid+",step1\n"+userid+","+username+"\n"+userid+",483678945\n")
                file.close()
		print "session initialized"
	else:
		print "session not initialized"


@route('/askbot',method="POST")
def askbot():
	print "coming ddb"
	#print str (request.body)
	#print json.dumps(request) 
	print request.json["message_type"]
	print request.json["callback_url"]
	callback=request.json["callback_url"]
	print "binder id :",request.json["binder_id"]
	print "user id :",request.json["event"]["user"]["id"]
	userid=str(request.json["event"]["user"]["id"])
	username=str(request.json["event"]["user"]["name"])
	initSession(userid,username)
	getSessionClassification(userid)
	print  "name :",request.json["event"]["user"]["name"]
	inputText=request.json["event"]["comment"]["text"]
	print "inputText : ",inputText
	if not(userid=="UhlRgvK87fd98zCy6EcRqD4"):
        	if inputText.lower()=="hi" or inputText.lower()=="hello" :
			reply="hello "+str(request.json["event"]["user"]["name"])+" .. How can i help you.. !"
			responseData={'payload':reply}
			requests.post(callback,data=responseData)
			print "response posted"
        	elif inputText.lower()=="stop" or inputText.lower()=="cancel" :
			reply="Cancelling the transaction..."
			setSessionClassification(userid,"nil")
                        setIntentSteps(userid,"step1","nil")
                        delname=userid+"_transfer.sum"
                        os.remove(delname)

			responseData={'payload':reply}
			requests.post(callback,data=responseData)
			print "response posted"
		else:
			classifierResponse=getSessionClassification(userid).strip()
			print "after get response ,",classifierResponse
			if classifierResponse=="nil":
				print "no classification present"
				classifierResponse=naiveclassifier.classifyTextWithScore(inputText)
				if "others" not in classifierResponse:
					setSessionClassification(userid,classifierResponse)
					setIntentSteps(userid,"step1",classifierResponse)
			if (classifierResponse=="others"):
				reply=aiml_.getResponse(inputText)
				if reply is None:
					responseData={'payload':'I dont want to talk about it..'}
				else:
					responseData={'payload':reply}
				requests.post(callback,data=responseData)
				print "response posted"
			elif (classifierResponse=="Account intent"):
				reply="account intent"
				responseData={'payload':reply}
				requests.post(callback,data=responseData)
				print "response posted"
			elif (classifierResponse=="Transfer intent"):
				print "should come here"
				step=getIntentSteps(userid,"Transfer intent")
				reply=transferIntent.getConversationResponse(userid,step,inputText)
				if(reply=="next"):
					step=getIntentSteps(userid,"Transfer intent")
					reply=transferIntent.getConversationResponse(userid,step,inputText)
				#reply="transfer intent"
				responseData={'payload':reply}
				requests.post(callback,data=responseData)
				print "response posted"
			elif (classifierResponse=="Transaction intent"):
				step=getIntentSteps(userid,"Transaction intent")
				reply=transactionIntent.getConversationResponse(userid,step,inputText)
				if(reply=="next"):
					step=getIntentSteps(userid,"Transaction intent")
					reply=transactionIntent.getConversationResponse(userid,step,inputText)

				#reply="transaction intent"
				responseData={'payload':reply}
				requests.post(callback,data=responseData)
				print "response posted"


	else:
		print "automated responses from user to bot not allowed"

	print "coming jkhjdhd"


	

	


run(host='172.31.45.19', port=7500)
#run(host='52.42.179.242', port=7500)
